/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sample

fun calculateScore(input: String) = convertToFrames(input).sum()

private fun convertToFrames(input: String): List<Int> {
    val stringFrames = input.replace('-', '0').split("||", "|")
    val frameData = stringFrames.windowed(3, 1, true)
        .take(10)
        .map { Triple(it[0], it.getOrElse(1) { "00" }, it.getOrElse(2) { "00" }) }

    return frameData.map(buildFrame)
}

private val buildFrame = { frameData: Triple<String, String, String> ->
    val (frame, nextFrame, frameAfterNext) = frameData

    if (frame == "X") {
        val bonusRolls = getBonusRolls(BonusRollsAmount.TWO, nextFrame, frameAfterNext)

        10 + bonusRolls.sum()
    } else if (frame[1] == '/') {
        val bonusRoll = getBonusRolls(BonusRollsAmount.ONE, nextFrame, frameAfterNext)

        10 + bonusRoll.first()
    } else {
        frame.sumOf { it.digitToInt() }
    }
}

private enum class BonusRollsAmount {
    ONE, TWO
}

private fun getBonusRolls(amount: BonusRollsAmount, nextFrame: String, frameAfterNext: String): List<Int> {
    val rollsAmount = if (amount == BonusRollsAmount.ONE) 1 else 2

    return (nextFrame.toCharArray() + frameAfterNext.toCharArray())
        .take(rollsAmount)
        .map { if (it == 'X') 10 else it.digitToInt() }
}